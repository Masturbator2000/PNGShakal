# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Hecker\Desktop\PNGShakal\.UI\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


def PyState():
    from sys import version
    from re import findall
    from os import sep as pathsep
    from time import time

    slt = time()

    print(f'[INFO] System path separator: {pathsep}')

    _file = __file__.replace(pathsep, '/')

    ver = findall('\d+\.\d+\.\d+', version)[0]

    if len(ver) == 0:
        ver = findall('\d+\.\d+', version)[0]

    bit = '32-bit' if '32 bit' in version else '64-bit'

    print(f'[INFO] Python version: {ver} {bit}')

    print(f'[INFO] Script location: {__file__}')

    from sys import executable

    print(f'[INFO] Python interpreter location: {executable}')

    folder = pathsep.join(_file.split('/')[:-1:1])

    print(f'[INFO] Script folder: {folder}')

    print(f'[INFO] Logging time: {round((time() - slt) * 1000, 5) } msecs.')


PyState()


def log(text, pref='Init', app='PNGShakal'):
    print('[%s:%s] %s' % (app, pref, text))


log('Function "log" defined')

try:
    from PyQt5 import QtCore, QtGui, QtWidgets
    log('From PyQt5 imported QtCore, QtGui, QtWidgets')
    from os import _exit, system
    log('From os imported _exit, system')
    from sys import argv
    log('From sys imported argv')

    from ctypes import windll
    log('From ctypes imported WinDLL')
    from os.path import isfile
    log('From os.path imported isfile')

    from PIL import Image, ImageFilter, ImageEnhance
    log('From Pillow imported Image, ImageFilter, ImageEnhance')
    from random import randint, uniform
    log('From random imported randint, uniform')

    from os.path import expanduser
    log('From os.path imported expanduser')
    from shutil import move

    import numpy as np
    log('Imported numpy as np')
    import PIL
    log('Imported Pillow')
except Exception as e:
    e_modl = str(e).replace('No module named ', '').replace("'", '').lower()
    from re import sub
    e_modl = sub('cannot import name .* from ', '', e_modl)
    e_modl = sub('\(.*\)', '', e_modl)
    e_modl = e_modl.replace(' ', '')
    if e_modl == 'pil':
        e_modl = 'Pillow'
    log(f'Module {e_modl} not found', 'FATAL')
    print(f'ОШИБКА: Модуль {e_modl} не найден. Хотите установить его?')
    from os import _exit
    answer = ''
    while answer not in ['y', 'n']:
        answer = input('Установить модуль? y/n: ').lower()
        if answer not in ['y', 'n']:
            print('Вы должны ответить y - да; n - нет')
            continue
        if answer == 'n':
            log('Stopping application', 'STOP')
            _exit(0)
        else:
            break
    from subprocess import run
    try:
        run(['pip', 'install', e_modl])
    except:
        log('Failed to run pip, trying run pip with using: py -m pip')
        try:
            run(['py', '-m', 'pip', 'install', e_modl])
        except:
            log('Failed to run pip.', 'FATAL')
    log('Restarting application', 'INFO')
    from subprocess import run
    from sys import executable
    run([executable, __file__])
    from os import _exit
    _exit(0)

system('title PNGShakal Console')
log('Console title is set to "PNGShakal Console"')


def DropTF(chance=2):
    if randint(1, chance) == 1:
        return True
    else:
        return False


log('Function "DropTF" defined')


def Info(text, msg):
    windll.user32.MessageBoxW(0, text, msg, 0)


log('Function "Info" defined')

UserPath = expanduser('~')
log('Current user folder: %s' % UserPath)

ApplFolder = '\\'.join(__file__.split('\\')[:-1:1])


def FileChooser(ChooserTitle,
                DefaultDirectory=UserPath + '\\Pictures\\',
                Filter='PNGShakal (*.png *.jpg *.bmp)'):
    log('Opening windows FileChooser Window', 'FilePick')
    UserChoice = QtWidgets.QFileDialog.getOpenFileName(None, ChooserTitle,
                                                       DefaultDirectory,
                                                       Filter)
    log('Selected PNGShakal file: "%s"' % UserChoice[0], 'FilePick')
    return UserChoice


log('Function "FileChooser" defined')


def FileSave(ChooserTitle,
             DefaultDirectory=UserPath + '\\Pictures\\Shakal.png',
             Filter='PNGShakal (*.png *.jpg *.bmp *.psd)'):
    log('Opening windows FileSave Window', 'FileSave')
    UserChoice = QtWidgets.QFileDialog.getSaveFileName(None, ChooserTitle,
                                                       DefaultDirectory,
                                                       Filter)
    log('Selected image save path: "%s"' % str(UserChoice), 'FileSave')
    return UserChoice


log('Function "FileSave" defined')


def pixelate(image, pixel_size=9, draw_margin=True):
    log(
        'Started function "pixelate" with args: image="%s" pixel_size="%s" draw_margin="%s"'
        % (image, str(pixel_size), str(draw_margin)), 'Create')
    margin_color = (0, 0, 0)
    log('margin_color="%s"' % str(margin_color), 'Create')

    image = image.resize(
        (image.size[0] // pixel_size, image.size[1] // pixel_size),
        Image.NEAREST)
    log(
        'Resized image: image.size[0] // pixel_size, image.size[1] // pixel_size; Image.NEAREST',
        'Create')
    image = image.resize(
        (image.size[0] * pixel_size, image.size[1] * pixel_size),
        Image.NEAREST)
    log(
        'Resized image: image.size[0] * pixel_size, image.size[1] * pixel_size; Image.NEAREST',
        'Create')
    pixel = image.load()
    log('Image loaded')

    # Draw black margin between pixels
    if draw_margin:
        log('Drawing margin', 'Create')
        for i in range(0, image.size[0], pixel_size):
            for j in range(0, image.size[1], pixel_size):
                for r in range(pixel_size):
                    pixel[i + r, j] = margin_color
                    log(
                        'Drawing margin, pixel[i+r, j] = %s' %
                        str(pixel[i + r, j]), 'Create')
                    pixel[i, j + r] = margin_color
                    log(
                        'Drawing margin, pixel[i, j+r] = %s' %
                        str(pixel[i, j + r]), 'Create')

    return image


def SHAKAL_(File):
    log('Started function "SHAKAL_" with args: File="%s"' % File, 'Create')
    log(
        'Temp image file: %s' % UserPath +
        '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png', 'Create')
    Ui_Form.File = File

    PNG = Image.open(File)
    log('Opened image as PNG', 'Create')
    PNG = pixelate(PNG, randint(5, 15), False)
    log('PNG: Effect pixelate', 'Create')
    PNG.save(UserPath + '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png',
             'PNG')
    log('PNG Updated', 'Create')
    PNG = Image.open(UserPath +
                     '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png')
    log('Opened image as PNG', 'Create')
    PNG = PNG.convert('RGB')
    log('PNG converted to RGB', 'Create')

    PNGQualityBad = uniform(2, 7)
    log('Quality = Quality / %s' % str(PNGQualityBad), 'Create')

    PNGSize = PNG.size
    log('PNG size: %s' % str(PNGSize), 'Create')
    NewPNGSize = (int(PNGSize[0] / PNGQualityBad),
                  int(PNGSize[1] / PNGQualityBad))

    log('New PNG size: %s' % str(NewPNGSize), 'Create')

    PNG = PNG.resize(NewPNGSize)
    log('PNG Resized: New PNG size', 'Create')

    if DropTF():
        log('PNG resized back with filter Image.NEAREST', 'Create')
        PNG = PNG.resize(PNGSize, Image.NEAREST)
    else:
        log('PNG resized back without filter Image.NEAREST', 'Create')
        PNG = PNG.resize(PNGSize)

    if DropTF():
        log('Applying effect ImageFilter.MinFilter 5', 'Create')
        PNG = PNG.filter(ImageFilter.MinFilter(5))
    if DropTF():
        log('Applying effect ImageFilter.DETAIL', 'Create')
        PNG = PNG.filter(ImageFilter.DETAIL)
    if DropTF():
        log('Applying effect ImageFilter.EDGE_ENHANCE_MORE', 'Create')
        PNG = PNG.filter(ImageFilter.EDGE_ENHANCE_MORE)
    if DropTF():
        log('Applying effect ImageFilter.RankFilter 3 0', 'Create')
        PNG = PNG.filter(ImageFilter.RankFilter(3, 0))
    if DropTF():
        log('Applying effect ImageFilter.BLUE', 'Create')
        PNG = PNG.filter(ImageFilter.BLUR)

    if DropTF():
        col = ImageEnhance.Color(PNG)
        pngcolr = uniform(1, 8)
        PNG = col.enhance(pngcolr)
        log('PNG color set: %s' % str(pngcolr), 'Create')

    if DropTF():
        ctr = ImageEnhance.Contrast(PNG)
        pngctr = uniform(30, 120)
        log('PNG contrast set: %s' % str(pngctr), 'Create')
        PNG = ctr.enhance(pngctr)

    if DropTF():
        brt = ImageEnhance.Brightness(PNG)
        pngbr = uniform(30, 100)
        log('PNG brightness set: %s' % str(pngbr), 'Create')
        PNG = brt.enhance(pngbr)

    if DropTF():
        shp = ImageEnhance.Sharpness(PNG)
        pngshp = uniform(50, 150)
        log('PNG sharpness set: %s' % str(pngshp), 'Create')
        PNG = shp.enhance(pngshp)

    PNG.save(UserPath + '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png')
    log('PNG updated', 'Create')

    ImgStat.ImgSize = PNGSize

    if DropTF():
        log('Applying SuperShakal effect to PNG', 'Create')
        im = Image.open(UserPath +
                        '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png')
        a = np.asarray(im)
        b = np.zeros_like(a)
        xs = a.shape[1] // 3
        for x in range(xs // 2):
            b[:, x] = a[:, x * 2]
        for x in range(xs * 2):
            b[:, xs // 2 + x] = a[:, xs + x // 2]
        for x in range(xs // 2):
            b[:, xs // 2 + xs * 2 + x] = a[:, xs * 2 + x * 2]
        imb = PIL.Image.fromarray(b)

        imb.save(UserPath + '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png')

    #PNG = Image.open(UserPath + '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png')

    #for x in range(randint(30000, 200000)):
    #    PNG.putpixel(( randint(7, PNGSize[0]) - 7, randint(7, PNGSize[1]) - 7 ),(randint(0, 255),randint(0, 255),randint(0, 255)))

    #PNG.save(UserPath + '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png')
    log('SHAKAL image created', 'CreateDone')


class ImgStat:
    pass


class Ui_Form(QtWidgets.QMainWindow):
    pixmap = ''

    def setupUi(self, Form):
        log('Creating result window')
        sx = 850
        sy = 700
        imx = ImgStat.ImgSize[0]
        imy = ImgStat.ImgSize[1]

        print(sx, sy, imx, imy)

        if imx > imy:
            sx -= imx % sx
            sy -= imy % sy
        elif imx == imy:
            sx = imx % sx
            sy = sx
        else:
            sx -= imx % sy
            sy -= imy % sx

        if sx <= 400:
            sx += 400
            sy += 400

        log('sx="%i" sy="%i" imx="%i" imy="%i"' % (sx, sy, imx, imy))

        log('Initializing result window elements')

        Form.setObjectName("Form")
        Form.resize(sx + 20, sy + 80)
        Form.setMinimumSize(QtCore.QSize(sx + 20, sy + 80))
        Form.setMaximumSize(QtCore.QSize(sx + 20, sy + 80))
        self.setWindowIcon(QtGui.QIcon(ApplFolder + '\\ApplicationIcon.png'))
        self.BackgroundFloodFill = QtWidgets.QLabel(Form)
        self.BackgroundFloodFill.setGeometry(QtCore.QRect(0, 0, 1000, 1000))
        self.BackgroundFloodFill.setStyleSheet(
            "background-color: rgb(0, 0, 0);")
        self.BackgroundFloodFill.setText("")
        self.BackgroundFloodFill.setObjectName("BackgroundFloodFill")
        self.RetImage = QtWidgets.QLabel(Form)

        self.RetImage.setGeometry(QtCore.QRect(10, 40, sx, sy))

        self.RetImage.setText("")
        self.RetImage.setPixmap(QtGui.QPixmap(self.pixmap))
        self.RetImage.setScaledContents(True)
        self.RetImage.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft
                                   | QtCore.Qt.AlignTop)
        self.RetImage.setObjectName("RetImage")
        self.ResultNotf = QtWidgets.QLabel(Form)
        self.ResultNotf.setGeometry(QtCore.QRect(10, 10, 851, 25))
        self.ResultNotf.setStyleSheet("color: rgb(255, 255, 255);\n"
                                      "font: 87 12pt \"Segoe UI Black\";")
        self.ResultNotf.setObjectName("ResultNotf")
        self.Save = QtWidgets.QPushButton(Form)
        self.Save.setGeometry(QtCore.QRect(sx - 80, sy + 50, 91, 23))
        self.Save.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Save.setStyleSheet("border-style: solid;\n"
                                "border-radius: 7;\n"
                                "border-color: rgb(255, 255, 255);\n"
                                "background-color: rgb(255, 255, 255);\n"
                                "border-width: 1;\n"
                                "color: rgb(0, 0, 0);\n"
                                "font: 87 9pt \"Segoe UI Black\";")
        self.Save.setObjectName("Save")
        self.Restart = QtWidgets.QPushButton(Form)
        self.Restart.setGeometry(QtCore.QRect(sx - 190, sy + 50, 101, 23))
        self.Restart.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Restart.setStyleSheet("border-style: solid;\n"
                                   "border-radius: 7;\n"
                                   "border-color: rgb(255, 255, 255);\n"
                                   "background-color: rgb(255, 255, 255);\n"
                                   "border-width: 1;\n"
                                   "color: rgb(0, 0, 0);\n"
                                   "font: 87 9pt \"Segoe UI Black\";")
        self.Restart.setObjectName("Restart")

        self.Again = QtWidgets.QPushButton(Form)
        self.Again.setGeometry(QtCore.QRect(10, sy + 50, 121, 23))
        self.Again.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Again.setStyleSheet("border-style: solid;\n"
                                 "border-radius: 7;\n"
                                 "border-color: rgb(255, 255, 255);\n"
                                 "background-color: rgb(255, 255, 255);\n"
                                 "border-width: 1;\n"
                                 "color: rgb(0, 0, 0);\n"
                                 "font: 87 9pt \"Segoe UI Black\";")
        self.Again.setObjectName("Restart")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Результат"))
        self.ResultNotf.setText(_translate("Form", "Результат"))
        self.Save.setText(_translate("Form", "Сохранить"))
        self.Restart.setText(_translate("Form", "Пересоздать"))
        self.Again.setText(_translate("Form", "Другая картинка"))

        self.AddFunctions()

    def Shakalize_Temp(self):
        self.hide()
        SHAKAL_(self.File)

        self.pixmap = UserPath + '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png'

        self.RetImage.setPixmap(QtGui.QPixmap(self.pixmap))
        self.show()

    def restart(self):
        log('Creating PNG again', 'Restart')
        self.Shakalize_Temp()

    def save(self):
        log('Saving PNG', 'Save')
        temppng = UserPath + '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png'
        saveto = FileSave('PNGShakal - Сохранение изображения',
                          Filter='PNG Картинка (*.png)')[0]

        if saveto != None:
            move(temppng, saveto)
            log('Moving "%s" to "%s"' % (temppng, saveto), 'Save')
            _exit(0)
        else:
            log('User cancelled file save', 'Warn')

    def again(self):
        log('Selecting new PNG', 'ChangePNG')
        global Window

        Window = ApplicationWindow()
        Window.show()
        self.hide()

    def AddFunctions(self):
        log('Initializing result window buttons functions')
        self.Restart.clicked.connect(self.restart)
        self.Save.clicked.connect(self.save)
        self.Again.clicked.connect(self.again)


class ResWindow(Ui_Form):

    def __init__(self):
        log('Initializing results window (__init__)')
        super().__init__()
        log('Setup results window UI')
        self.setupUi(self)

    def closeEvent(self, *args):
        log('Application closed', 'Exit')
        _exit(0)


class Ui_ApplicationWindow(QtWidgets.QMainWindow):

    def setupUi(self, ApplicationWindow):
        log('Initializing main window elements...')
        ApplicationWindow.setObjectName("ApplicationWindow")
        ApplicationWindow.resize(300, 220)
        ApplicationWindow.setMinimumSize(QtCore.QSize(300, 220))
        ApplicationWindow.setMaximumSize(QtCore.QSize(300, 220))
        self.setWindowIcon(QtGui.QIcon(ApplFolder + '\\ApplicationIcon.png'))
        self.CentralWidget = QtWidgets.QWidget(ApplicationWindow)
        self.CentralWidget.setObjectName("CentralWidget")
        self.BackgroundFloodFill = QtWidgets.QLabel(self.CentralWidget)
        self.BackgroundFloodFill.setGeometry(QtCore.QRect(0, 0, 301, 221))
        self.BackgroundFloodFill.setCursor(
            QtGui.QCursor(QtCore.Qt.ForbiddenCursor))
        self.BackgroundFloodFill.setStyleSheet(
            "background-color: rgb(0, 0, 0);")
        self.BackgroundFloodFill.setText("")
        self.BackgroundFloodFill.setObjectName("BackgroundFloodFill")
        self.ApplicationName = QtWidgets.QLabel(self.CentralWidget)
        self.ApplicationName.setGeometry(QtCore.QRect(0, 10, 301, 31))
        self.ApplicationName.setStyleSheet("color: rgb(255, 255, 255);\n"
                                           "font: 87 16pt \"Segoe UI Black\";")
        self.ApplicationName.setAlignment(QtCore.Qt.AlignCenter)
        self.ApplicationName.setObjectName("ApplicationName")
        self.FilePathInput = QtWidgets.QLineEdit(self.CentralWidget)
        self.FilePathInput.setGeometry(QtCore.QRect(20, 80, 261, 31))
        self.FilePathInput.setStyleSheet("border-style: solid;\n"
                                         "border-radius: 7;\n"
                                         "border-color: rgb(255, 255, 255);\n"
                                         "background-color: rgb(0, 0, 0);\n"
                                         "border-width: 1;\n"
                                         "color: rgb(255, 255, 255);\n"
                                         "font: 87 9pt \"Segoe UI Black\";\n"
                                         "padding-left: 5")
        self.FilePathInput.setText("")
        self.FilePathInput.setFrame(False)
        self.FilePathInput.setDragEnabled(True)
        self.FilePathInput.setPlaceholderText("")
        self.FilePathInput.setClearButtonEnabled(True)
        self.FilePathInput.setObjectName("FilePathInput")
        self.HintFile = QtWidgets.QLabel(self.CentralWidget)
        self.HintFile.setGeometry(QtCore.QRect(10, 60, 151, 21))
        self.HintFile.setStyleSheet("color: rgb(255, 255, 255);\n"
                                    "font: 87 8pt \"Segoe UI Black\";\n"
                                    "padding-left: 7;\n"
                                    "padding-bottom: 5;")
        self.HintFile.setAlignment(QtCore.Qt.AlignCenter)
        self.HintFile.setObjectName("HintFile")
        self.SelectFileButton = QtWidgets.QPushButton(self.CentralWidget)
        self.SelectFileButton.setGeometry(QtCore.QRect(170, 120, 111, 23))
        self.SelectFileButton.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.SelectFileButton.setStyleSheet(
            "border-style: solid;\n"
            "border-radius: 7;\n"
            "border-color: rgb(255, 255, 255);\n"
            "background-color: rgb(255, 255, 255);\n"
            "border-width: 1;\n"
            "color: rgb(0, 0, 0);\n"
            "font: 87 9pt \"Segoe UI Black\";")
        self.SelectFileButton.setObjectName("SelectFileButton")
        self.SHAKAL = QtWidgets.QPushButton(self.CentralWidget)
        self.SHAKAL.setGeometry(QtCore.QRect(20, 180, 261, 23))
        self.SHAKAL.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.SHAKAL.setStyleSheet("border-style: solid;\n"
                                  "border-radius: 7;\n"
                                  "border-color: rgb(255, 255, 255);\n"
                                  "background-color: rgb(255, 255, 255);\n"
                                  "border-width: 1;\n"
                                  "color: rgb(0, 0, 0);\n"
                                  "font: 87 9pt \"Segoe UI Black\";")
        self.SHAKAL.setObjectName("SHAKAL")
        ApplicationWindow.setCentralWidget(self.CentralWidget)

        self.retranslateUi(ApplicationWindow)
        QtCore.QMetaObject.connectSlotsByName(ApplicationWindow)

    def retranslateUi(self, ApplicationWindow):
        _translate = QtCore.QCoreApplication.translate
        ApplicationWindow.setWindowTitle(
            _translate("ApplicationWindow", "PNGShakal 2.0"))
        self.ApplicationName.setText(
            _translate("ApplicationWindow", "PNGShakal"))
        self.HintFile.setText(
            _translate("ApplicationWindow", "Расположение картинки"))
        self.SelectFileButton.setText(
            _translate("ApplicationWindow", "Выбрать файл"))
        self.SHAKAL.setText(_translate("ApplicationWindow", "ШАКАЛИЗИРОВАТЬ"))

        self.AddFunctions()

    def SelectImage(self):
        log('Selecting PNG', 'MainWindow')
        SelectedFile = FileChooser('PNGShakal - Выберите картинку')[0]
        print(SelectedFile)

        self.FilePathInput.setText(SelectedFile)

    def Shakalize_Temp(self):
        File = self.FilePathInput.text()

        if not isfile(File):
            Info('Указанного файла не существует.', 'PNGShakal - Ошибка')
            return 1
        else:
            SHAKAL_(File)
            Ui_Form.pixmap = UserPath + '\\AppData\\Local\\Temp\\ShakalImage-Temp-PNG.png'

            self.hide()
            print('Window Closed')

            Window = ResWindow()
            Window.show()

    def AddFunctions(self):
        self.SelectFileButton.clicked.connect(self.SelectImage)
        self.SHAKAL.clicked.connect(self.Shakalize_Temp)


class ApplicationWindow(Ui_ApplicationWindow):

    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def closeEvent(self, *args):
        _exit(0)


if __name__ == "__main__":
    log('Building application')
    Application = QtWidgets.QApplication(argv)
    log('Value "Application" defined')
    Window = ApplicationWindow()
    Window.show()
    log('Main window show')
    _exit(Application.exec_())
